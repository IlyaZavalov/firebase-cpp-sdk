name: Update custom GitHub runners

on:
  workflow_dispatch:
    inputs:
      runner_list:
        description: 'Runner hostnames (comma-separated)'
        default: 'fplmac1,fplmac2'
        required: true
      update_tools:
        description: 'Update tools?'
        default: '1'
        required: true
      update_os:
        description: 'Update OS?'
        default: '0'
        required: true

env:
  GITHUB_TOKEN: ${{ github.token }}

jobs:
  prepare:
    name: prepare
    runs-on: ubuntu-20.04
    if: github.event.inputs.runner_list != ''
    outputs:
      runner_hostnames: ${{ steps.prepare_inputs.outputs.runner_hostnames }}
    steps:
      - name: Prepare inputs
        id: prepare_inputs
        shell: bash
        run: |
          csv='${{github.event.inputs.runner_list}}'
          json="['$(echo ${csv} | sed s/,/\',\'/g)']"
          echo "runner_hostnames=${json}"
          echo "runner_hostnames=${json}" >> $GITHUB_OUTPUT
        
  update_custom_runners:
    name: update-custom-runner-${{ matrix.runner_hostname }}
    needs: [ prepare ]
    runs-on: [self-hosted, '${{ matrix.runner_hostname }}' ]
    if: github.event.inputs.runner_list != ''

    strategy:
      matrix:
        runner_hostname: ${{ fromJson(needs.prepare.outputs.runner_hostnames) }}

    steps:
      - name: Update tools
        if: github.event.inputs.update_tools
        shell: bash
        run: |
          set -ex
          npm install -g firebase-tools

      - name: Check for OS updates
        shell: bash
        run: |
          softwareupdate -l -r 2>&1
          softwareupdate -l -r 2>&1 | tr '\n' '|' | sed 's/|/%0A/g' | sed 's/^/::warning ::/'
        
      - name: Update OS
        if: github.event.inputs.update_os
        shell: bash
        run: |
          # Need to use sudo to run the update with reboot. Set up a temporary
          # script to provide the password.
          tmpfile="$(mktemp)"
          trap "rm -f \"${tmpfile}\"" EXIT HUP QUIT PIPE INT
          cat > ${tmpfile} <<EOF
          #!/usr/bin/env bash
          rm -f "${tmpfile}"
          cat <<END_OF_FILE
          ${{secrets.CUSTOM_RUNNER_PW}}
          END_OF_FILE
          EOF
          chmod u+x "${tmpfile}"
          SUDO_ASKPASS="${tmpfile}" sudo -A softwareupdate -l -r -R -f 2>&1
